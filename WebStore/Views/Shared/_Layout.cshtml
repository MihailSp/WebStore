<!DOCTYPE html>
<html>
<head>
    <meta charset="utf-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <meta name="description" content="">
    <meta name="author" content="">
    <title>@ViewData["Title"] E-Shopper</title>
    
	@await Html.PartialAsync("Partial/_Styles")

    <!--[if lt IE 9]>
    <script src="~/js/html5shiv.js"></script>
    <script src="~/js/respond.min.js"></script>
    <![endif]-->       
</head><!--/head-->

<body>
	<partial name="Partial/_Header"/>
	
	@RenderBody()
	
	<partial name="Partial/_Footer"/> 
	
    <partial name="Partial/_Scripts"/> 
	 
</body>
    
</html>

@*<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <meta http-equiv="X-UA-Compatible" content="ie=edge">
    <title>Главная страница</title> 
<style>    
    body{
        position: absolute;
        left: 0;
        top: 0;
        margin: 0;
        padding: 0;
        width: 100%;
        height: 100%;
    }
    canvas{
        position: relative;
        border: none;
        width: 100%;
        height: 100%;
    }
</style>

<script id="shader-fs" type="x-shader/x-fragment">    
    precision highp float;
    uniform float iTime;
    uniform vec2 iResolution;
    uniform vec2 iMouse;		
    const int NUM_STEPS = 8;
    const float PI	 	= 3.141592;
    const float EPSILON	= 1e-3;
    const int ITER_GEOMETRY = 3;
    const int ITER_FRAGMENT = 5;
    const float SEA_HEIGHT = 0.6;
    const float SEA_CHOPPY = 4.0;
    const float SEA_SPEED = 0.8;
    const float SEA_FREQ = 0.16;
    const vec3 SEA_BASE = vec3(0.0,0.09,0.18);
    const vec3 SEA_WATER_COLOR = vec3(0.8,0.9,0.6)*0.6;
    const mat2 octave_m = mat2(1.6,1.2,-1.2,1.6);
    #define SEA_TIME (1.0 + iTime * SEA_SPEED)
    #define EPSILON_NRM (0.1 / iResolution.x)
    float random(float p){
                return fract(sin(p) * 10000.);}		
    mat3 fromEuler(vec3 ang){
	    vec2 a1 = vec2(sin(ang.x),cos(ang.x));
        vec2 a2 = vec2(sin(ang.y),cos(ang.y));
        vec2 a3 = vec2(sin(ang.z),cos(ang.z));
        mat3 m;
        m[0] = vec3(a1.y*a3.y+a1.x*a2.x*a3.x,a1.y*a2.x*a3.x+a3.y*a1.x,-a2.y*a3.x);
	    m[1] = vec3(-a2.y*a1.x,a1.y*a2.y,a2.x);
	    m[2] = vec3(a3.y*a1.x*a2.x+a1.y*a3.x,a1.x*a3.x-a1.y*a3.y*a2.x,a2.y*a3.y);
	    return m;}
    float hash( vec2 p ){
	    float h = dot(p,vec2(127.1,311.7));	
        return fract(sin(h)*43758.5453123);}
    float noise( in vec2 p ){
        vec2 i = floor( p );
        vec2 f = fract( p );	
	    vec2 u = f*f*(3.0-2.0*f);
        return -1.0+2.0*mix( mix( hash( i + vec2(0.0,0.0) ), 
                        hash( i + vec2(1.0,0.0) ), u.x),
					    mix( hash( i + vec2(0.0,1.0) ), 
                        hash( i + vec2(1.0,1.0) ), u.x), u.y);}
    float diffuse(vec3 n,vec3 l,float p){
        return pow(dot(n,l) * 0.4 + 0.6,p);}
    float specular(vec3 n,vec3 l,vec3 e,float s){    
        float nrm = (s + 8.0) / (PI * 8.0);
        return pow(max(dot(reflect(e,n),l),0.0),s) * nrm;}
    vec3 getSkyColor(vec3 e){
        e.y = (max(e.y,0.0)*0.8+0.2)*0.8;
        return vec3(pow(1.0-e.y,2.0), 1.0-e.y, 0.6+(1.0-e.y)*0.4) * 1.1;}
    float sea_octave(vec2 uv, float choppy){
        uv += noise(uv);        
        vec2 wv = 1.0-abs(sin(uv));
        vec2 swv = abs(cos(uv));    
        wv = mix(wv,swv,wv);
        return pow(1.0-pow(wv.x * wv.y,0.65),choppy);}
    float map(vec3 p){
        float freq = SEA_FREQ;
        float amp = SEA_HEIGHT;
        float choppy = SEA_CHOPPY;
        vec2 uv = p.xz; uv.x *= 0.75;    
        float d, h = 0.0;    
        for(int i = 0; i < ITER_GEOMETRY; i++) 	{        
    	    d = sea_octave((uv+SEA_TIME)*freq,choppy);
    	    d += sea_octave((uv-SEA_TIME)*freq,choppy);
            h += d * amp;        
    	    uv *= octave_m; freq *= 1.9; amp *= 0.22;
            choppy = mix(choppy,1.0,0.2);    }
        return p.y - h;}
    float map_detailed(vec3 p){
        float freq = SEA_FREQ;
        float amp = SEA_HEIGHT;
        float choppy = SEA_CHOPPY;
        vec2 uv = p.xz; uv.x *= 0.75;    
        float d, h = 0.0;    
        for(int i = 0; i < ITER_FRAGMENT; i++) 	{        
    	    d = sea_octave((uv+SEA_TIME)*freq,choppy);
    	    d += sea_octave((uv-SEA_TIME)*freq,choppy);
            h += d * amp;        
    	    uv *= octave_m; freq *= 1.9; amp *= 0.22;
            choppy = mix(choppy,1.0,0.2);    }
        return p.y - h;}
    vec3 getSeaColor(vec3 p, vec3 n, vec3 l, vec3 eye, vec3 dist){  
        float fresnel = clamp(1.0 - dot(n,-eye), 0.0, 1.0);
        fresnel = pow(fresnel,3.0) * 0.5;        
        vec3 reflected = getSkyColor(reflect(eye,n));    
        vec3 refracted = SEA_BASE + diffuse(n,l,80.0) * SEA_WATER_COLOR * 0.12;     
        vec3 color = mix(refracted,reflected,fresnel);    
        float atten = max(1.0 - dot(dist,dist) * 0.001, 0.0);
        color += SEA_WATER_COLOR * (p.y - SEA_HEIGHT) * 0.18 * atten;    
        color += vec3(specular(n,l,eye,60.0));    
        return color;}
    vec3 getNormal(vec3 p, float eps){
        vec3 n;
        n.y = map_detailed(p);    
        n.x = map_detailed(vec3(p.x+eps,p.y,p.z)) - n.y;
        n.z = map_detailed(vec3(p.x,p.y,p.z+eps)) - n.y;
        n.y = eps;
        return normalize(n);}
    float heightMapTracing(vec3 ori, vec3 dir, out vec3 p){  
        float tm = 0.0;
        float tx = 1000.0;    
        float hx = map(ori + dir * tx);
        if(hx > 0.0) return tx;   
        float hm = map(ori + dir * tm);    
        float tmid = 0.0;
        for(int i = 0; i < NUM_STEPS; i++) 	{
            tmid = mix(tm,tx, hm/(hm-hx));                   
            p = ori + dir * tmid;                   
    	    float hmid = map(p);
		    if(hmid < 0.0) 		{
        	    tx = tmid;
                hx = hmid;
            } else {
                tm = tmid;
                hm = hmid;        }    }
        return tmid;}
    vec3 getPixel(in vec2 coord, float time){    
        vec2 uv = coord / iResolution.xy;
        uv = uv * 2.0 - 1.0;
        uv.x *= iResolution.x / iResolution.y;  
        vec3 ang = vec3(sin(time*3.0)*0.1,sin(time)*0.2+0.3,time);    
        vec3 ori = vec3(0.0,3.5,time*5.0);
        vec3 dir = normalize(vec3(uv.xy,-2.0)); 
	    dir.z += length(uv) * 0.14;
        dir = normalize(dir) * fromEuler(ang);       
        vec3 p;
        heightMapTracing(ori,dir, p);
        vec3 dist = p - ori;
        vec3 n = getNormal(p, dot(dist,dist) * EPSILON_NRM);
        vec3 light = normalize(vec3(0.0,1.0,0.8)); 
        return mix	(
            getSkyColor(dir),
            getSeaColor(p,n,light,dir,dist),
    	    pow(smoothstep(0.0,-0.02,dir.y),0.2) 	);}  
    void main()	{							
		    float time = iTime * 0.3 + iMouse.x * 1.01; 
		    vec3 color = getPixel(vec2(gl_FragCoord), time);			
		    gl_FragColor = vec4(pow(color, vec3(0.65)), 1.0);}
</script>
	
<script id="shader-vs" type="x-shader/x-vertex">       
    attribute vec3 aVertexPosition;
    void main(){
		gl_Position = vec4(aVertexPosition, 1.0);		}
</script>
	
<script>
	let canvas, gl;
	let vertexPositionLocation;
	let timeLocation, time;
	let resolutionLocation, resolution;
	let coordinatLocation;		
	let coordinat = [1.0, 1.0];	
	let startTime;
	let vertices = [
		-1.0, -1.0,
		 1.0, -1.0,
		-1.0,  1.0,

		-1.0,  1.0,
		 1.0, -1.0,
		 1.0,  1.0
	];		
        function resize(){
            // canvas.width = canvas.offsetWidth;
            // canvas.height = canvas.offsetHeight;
            let positioninfo = canvas.getBoundingClientRect();
            canvas.width = positioninfo.width;
            canvas.height = positioninfo.height;
            gl.viewport(0, 0, canvas.width, canvas.height);
        }
        function compileShader(shaderSource, shaderType){
            let shader = gl.createShader(shaderType);
            gl.shaderSource(shader, shaderSource);
            gl.compileShader(shader);
                // Check for any compilation error
            if (!gl.getShaderParameter(shader, gl.COMPILE_STATUS)){
                alert(gl.getShaderInfoLog(shader));
                return null;
            };
            return shader;
        };
        function getShader(id){
            let shaderScript = document.getElementById(id);
            let shaderSource = "";
            let textLine = shaderScript.firstChild;
            while (textLine) {
                // 3 - TEXT NODE
                if (textLine.nodeType == 3){
                    shaderSource += textLine.textContent;
                }
                textLine = textLine.nextSibling;
            }
            let shader;
            if (shaderScript.type == "x-shader/x-fragment"){
                shader = compileShader(shaderSource, gl.FRAGMENT_SHADER);
            }
            else if (shaderScript.type == "x-shader/x-vertex"){
                shader = compileShader(shaderSource, gl.VERTEX_SHADER);
            }
            else{
                return null;
            }
            return shader;
        }
        function drawScene(){
            gl.uniform1f(timeLocation, time);
            gl.uniform2fv(resolutionLocation, resolution);
			gl.uniform2fv(coordinatLocation, coordinat);			
            gl.drawArrays(gl.TRIANGLES, 0, 6);
        }		
		function onmousedown(event, canvas){
			// Определяем координаты клика (на странице) по обеим осям
			coordinat[0] = event.clientX;
			coordinat[1] = event.clientY;			
			// Определяем центр холста по обеим осям
			var middle_X = gl.canvas.width / 2;
			var middle_Y = gl.canvas.height / 2;
			// Получаем информацию размере холста и его положении на странице
			var rect = canvas.getBoundingClientRect();
			// Переводим координаты клика в понятный для webGL вид (от -1 до 1)
			coordinat[0] = ((coordinat[0] - rect.left) - middle_X) / middle_X;
			coordinat[1] = (middle_Y - (coordinat[1] - rect.top)) / middle_Y;			
		}
        function render(){
            requestAnimationFrame(render);
            resolution = [
                canvas.width,
                canvas.height
            ];				
            time = (Date.now() - startTime) / 1000;
            drawScene();
        }
        function bootstrap(){
            canvas = document.getElementById("holder");
            gl = canvas.getContext("experimental-webgl");
            resize();			
            window.addEventListener("resize", resize);			
			canvas.addEventListener("mousedown", 
				function(event){onmousedown(event, canvas);}
			);			
            let fragmentShader = getShader("shader-fs");
            let vertexShader = getShader("shader-vs");
            let shaderProgram = gl.createProgram();
            gl.attachShader(shaderProgram, vertexShader);
            gl.attachShader(shaderProgram, fragmentShader);
            gl.linkProgram(shaderProgram);
            gl.useProgram(shaderProgram);
            gl.deleteShader(fragmentShader);
            gl.deleteShader(vertexShader);
			coordinatLocation = gl.getUniformLocation(shaderProgram, "iMouse");			
            resolutionLocation = gl.getUniformLocation(shaderProgram, "iResolution");
            timeLocation = gl.getUniformLocation(shaderProgram, "iTime");
            vertexPositionLocation = gl.getAttribLocation(shaderProgram, "aVertexPosition");
            let buffer = gl.createBuffer();
            gl.bindBuffer(gl.ARRAY_BUFFER, buffer);
            gl.bufferData(gl.ARRAY_BUFFER, new Float32Array(vertices), gl.STATIC_DRAW);
            gl.enableVertexAttribArray(vertexPositionLocation);
            gl.vertexAttribPointer(vertexPositionLocation, 2, gl.FLOAT, false, 0, 0);
            startTime = Date.now();
            render();
        }
</script>    
</head>
<body onload="bootstrap();">
    <p>
        <a href="~/home/employees">Список сотрудников</a>
    </p>
    <p>Привет из первого представления!</p>
     <hr/>
    <h3>Океан</h3>    
    <canvas id="holder"></canvas>    
</body>
</html>*@


